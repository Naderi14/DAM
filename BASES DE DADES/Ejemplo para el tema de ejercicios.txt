SET SERVEROUTPUT ON
SELECT * FROM DB.EJERCICIOS;

CALL DB.SOL(NUMERO EJERCICIO,'');

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/												Ejercicios 901 - 912													  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 901
	"Cree una tabla DEPARTAMENTOS basándose en la siguiente tabla de instancias de tabla, utiliza una única instrucción.

	Nombre columna  			DEPARTAMENTO_ID 		NOMBRE
	Tipo de clave       		-                       -    
	Nulos/Únicos        		AUTOINCREMENT       	NOT NULL
	Tabla de claves ajenas 		-                       - 
	Columna de claves ajenas   	-                       -        
	Tipo de dato        		NUMBER              	VARCHAR2
	Longitud        			7                    	50"

	CREATE TABLE departamentos(
    	departamento_id NUMBER(7) GENERATED BY DEFAULT AS IDENTITY,
    	nombre VARCHAR(50) NOT NULL
	);

==============================================================================================================================
EJERCICIO 902
	"Agregue un comentario a la definición de la tabla DEPARTAMENTOS que describa la tabla."

	COMMENT ON TABLE departamentos IS 'Esta tabla alojará los distintos departamentos';

==============================================================================================================================
EJERCICIO 903
	"Agregue una restricción PRIMARY_KEY de nivel de tabla a la tabla DEPARTAMENTOS en la columna DEPARTAMENTO_ID. 
	Debe asignar el nombre my_dep_id_pk a la restricción en el momento de su creación.
	Indicación: La restricción se activa tan pronto como se ejecuta el comando ALTER TABLE correctamente."

	ALTER TABLE departamentos
	ADD CONSTRAINT my_dep_id_pk
	PRIMARY KEY(departamento_id);

==============================================================================================================================
EJERCICIO 904
	"Cree una tabla EMPLEADOS_DEP basándose en el siguiente gráfico de instancias de tabla.

	Nombre columna              EMPLEADO_ID NOMBRE      APELLIDO    DEPARTAMENTO_ID
	Tipo de clave               PRIMARY_KEY -           -           -         
	Nulos/Únicos                -           -           -           -
	Tabla de claves ajenas      -           -           -           -
	Columna de claves ajenas    -           -           -           FOREIGN KEY
	Tipo de dato                NUMBER      VARCHAR2    VARCHAR2    NUMBER
	Longitud                    7           25          25          7"

	CREATE TABLE empleados_dep(
	    empleado_id NUMBER(7),
	    nombre VARCHAR(25),
	    apellido VARCHAR(25),
	    departamento_id NUMBER(7),
	    PRIMARY KEY (empleado_id),
	    FOREIGN KEY (departamento_id) REFERENCES departamentos(departamento_id)
    );

==============================================================================================================================
EJERCICIO 905
	"Modifique la tabla EMPLEADOS_DEP para permitir un apellido de empleado de 50 caracteres."

	ALTER TABLE empleados_dep
	MODIFY apellido VARCHAR2(50);

==============================================================================================================================
EJERCICIO 906
	"Cree la tabla EMPLEADOS2 basándose en la estructura siguiente:

	Nombre columna              EMPLEADO_ID NOMBRE      APELLIDO    EMAIL         TELEFONO      FECHA_CONTRATO    JEFE_ID    SUELDO
	Tipo de clave               -           -           -           -             -             -                 -          -         
	Nulos/Únicos                NOT NULL    NOT NULL    NOT NULL    NOT NULL      NOT NULL      NOT NULL          -          -         
	Tabla de claves ajenas      -           -           -           -             -             -                 -          -         
	Columna de claves ajenas    -           -           -           -             -             -                 -          -         
	Tipo de dato                NUMBER      VARCHAR2    VARCHAR2    VARCHAR2      VARCHAR2      DATE              NUMBER     NUMBER  
	Longitud                    -           255         255         255           50            -                 12         8,2    "

	CREATE TABLE empleados2 (
	    empleado_id NUMBER NOT NULL,
	    nombre VARCHAR2(255) NOT NULL,
	    apellido VARCHAR2(255) NOT NULL,
	    email VARCHAR2(255) NOT NULL,
	    telefono VARCHAR2(50) NOT NULL,
	    fecha_contrato DATE NOT NULL,
	    jefe_id NUMBER(12),
	    sueldo NUMBER(8,2)
	);

==============================================================================================================================
EJERCICIO 907
	"Agregue una columna DEPARTAMENTO_ID a la tabla EMPLEADOS2 (será clave ajena a la tabla DEPARTAMENTOS en la siguiente pregunta). 
	El tipo de datos es number(7)."

	ALTER TABLE empleados2 ADD (departamento_id NUMBER(7));

==============================================================================================================================
EJERCICIO 908
	"Agregue una referencia de clave ajena en la tabla EMPLEADOS2 que asegure que no se asigna 
	el empleado a un departamento no existente. Llame a la restricción my_emp_dept_id_fk"

	ALTER TABLE empleados2 MODIFY (departamento_id NOT NULL)
	ADD CONSTRAINT my_emp_dept_id_fk FOREIGN KEY (departamento_id) REFERENCES departamentos(departamento_id);

==============================================================================================================================
EJERCICIO 909
	"Agregue una columna COMISION del tipo de datos NUMBER, precisión 2, escala 2 en la taba EMPLEADOS2 con una restricción
	a la columna COMISION que asegure que el valor de la comisión sea mayor o igual que cero."

	ALTER TABLE empleados2
	ADD (comision NUMBER(2,2) CHECK (comision >= 0));

==============================================================================================================================
EJERCICIO 910
	"Borre la columna SUELDO de la tabla EMPLEADOS2"

	ALTER TABLE empleados2
	DROP COLUMN sueldo;
	
==============================================================================================================================
EJERCICIO 911
	"Cambie el nombre de la tabla EMPLEADOS2 a EMPLEADOS_EMP"

	ALTER TABLE empleados2 RENAME TO empleados_emp;

==============================================================================================================================
EJERCICIO 912
	"Borre la tabla EMPLEADOS_EMP."

	DROP TABLE empleados_emp;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/									Ejercicios 701 - 704 | 720 - 721 | 740 - 743										  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 701

"Dar de alta a un empleado con los siguientes datos:
EMPLEADO_ID:    108
NOMBRE:     	Daenerys
APELLIDO:       Targaryen
EMAIL:      	daenerys.targaryen@example.com
TELEFONO:       5.171.278.181
FECHA_CONTRATO: 10/12/2021
JEFE_ID:        1
PUESTO_TRABAJO: Princess
SUELDO:     	23900"

INSERT INTO empleados
VALUES (108, 'Daenerys', 'Targaryen', 'daenerys.targaryen@example.com', '5.171.278.181', '10/12/2021', 1, 'Princess', 23900);

==============================================================================================================================
EJERCICIO 702

"Dar de alta a un producto con los siguientes datos:
PRODUCTO_ID:    	289
NOMBRE_PRODUCTO:    Asus
DESCRIPCION:    	ASUS Laptop
PRECIO_ESTANDAR:    899
PRECIO_LISTADO: 	799
CATEGORIA_ID:   	5"

INSERT INTO productos
VALUES (289, 'Asus', 'ASUS Laptop', 899, 799, 5);

==============================================================================================================================
EJERCICIO 703
"Crear un pedido con datos al empleado (VENDEDOR_ID) Daenerys"

INSERT INTO pedidos
VALUES (106, 47, 'Pending', 108, '18/11/24');

==============================================================================================================================
EJERCICIO 704
"Crea una línea de pedido con el pedido y el producto creado anteriormente, la única condición es que el total del pedido sean 150 euros."

INSERT INTO pedido_articulos
VALUES (106, 14, 289, 1, 150);

==============================================================================================================================
EJERCICIO 720

'A los empleados que ganan menos de 3000 euros, aumentarles el sueldo en un 10%.'

UPDATE empleados SET sueldo = sueldo + (sueldo * 0.10)
WHERE sueldo < 3000;

==============================================================================================================================
EJERCICIO 721

"A la empleada Daenerys aumentarle el sueldo en 50 euros."

UPDATE empleados
SET sueldo = 23950
WHERE nombre = 'Daenerys';

"A mi me gusta mas este"
UPDATE empleados
SET sueldo = sueldo + 50
WHERE nombre = 'Daenerys';

==============================================================================================================================
EJERCICIO 740

"Elimina a todos los empleados con identificadores mayores a 107, revisa los datos del pedido antes 
y después de realizar el ejercicio, que pasa con el campo VENDEDOR_ID."

DELETE empleados
WHERE empleado_id > 107;

==============================================================================================================================
EJERCICIO 741

"Elimina la línea del pedido creado en el ejercicio 704  utilizando únicamente los campos CANTIDAD y PRECIO_UNIDAD."

DELETE pedido_articulos
WHERE cantidad = 1 AND precio_unidad = 150;

==============================================================================================================================
EJERCICIO 742

"Elimina el pedido creado en el ejercicio 703."

DELETE pedidos
WHERE pedido_id = 106;

==============================================================================================================================
EJERCICIO 743

"Elimina el producto creado en el ejercicio 702."

DELETE productos
WHERE producto_id = 289;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 101 - 114												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 101

"Cree una consulta para mostrar los nombres de los productos y el precio estándar de los productos que cuestan más de 2500€."

SELECT nombre_producto, precio_estandar
FROM productos
WHERE precio_estandar > 2500;

==============================================================================================================================
EJERCICIO 102

"Cree una consulta para mostrar los nombres de los productos, el precio estándar y el identificador de la categoría 
para el número de producto 200."

SELECT nombre_producto, precio_estandar, categoria_id
FROM productos
WHERE producto_id = 200;

==============================================================================================================================
EJERCICIO 103

"Modifique la consulta anterior para mostrar los nombres de los productos y el precio estándar para todos 
los productos cuyos precios están comprendidos entre 50€ y 3000€."

SELECT nombre_producto, precio_estandar
FROM productos
WHERE precio_estandar BETWEEN 50 AND 3000;

==============================================================================================================================
EJERCICIO 104

"Modifique la consulta anterior para mostrar los nombres de los productos y el precio estándar para todos 
los productos cuyos precios no están comprendidos entre 50€ y $3000€"

SELECT nombre_producto, precio_estandar
FROM productos
WHERE precio_estandar < 50 OR precio_estandar > 3000;

==============================================================================================================================
EJERCICIO 105

"Muestre el apellido del empleado, el puesto de trabajo y la fecha de contrato de los empleados contratados 
entre el 27 de marzo de 2016 y el 1 de mayo de 2016. Ordene la consulta en orden ascendente por fecha de inicio"

SELECT apellido, puesto_trabajo, fecha_contrato
FROM empleados
WHERE fecha_contrato BETWEEN '27/03/2016' AND '01/05/2016'
ORDER BY fecha_contrato;

==============================================================================================================================
EJERCICIO 106

"Muestre el apellido y el puesto de trabajo de todos los empleados de los puestos de trabajo 
'Stock Clerk' y 'Stock Manager' en orden alfabético por apellido."

SELECT apellido, puesto_trabajo
FROM empleados
WHERE puesto_trabajo = 'Stock Clerk' OR puesto_trabajo = 'Stock Manager'
ORDER BY apellido;

==============================================================================================================================
EJERCICIO 107

"Modifique la consulta anterior para enumerar el apellido y el puesto de trabajo de los empleados que fueron 
contratados entre el 20 de febrero de 2016 y el 1 de mayo de 2016, y están en los puestos de trabajo 'Stock Clerk' 
y 'Stock Manager'. Etiquete las columnas Empleado y Contrato respectivamente"

SELECT apellido AS empleado, puesto_trabajo AS contrato
FROM empleados
WHERE (puesto_trabajo = 'Stock Clerk' OR puesto_trabajo = 'Stock Manager')
    AND fecha_contrato BETWEEN '20/02/2016' AND '01/05/2016'
ORDER BY apellido;

==============================================================================================================================
EJERCICIO 108

"Cree una consulta para mostrar los productos donde el precio del listado es más de 1000€ más caro que el 
precio estándar. Muestra el nombre del producto y la desviación (precio_listado–precio_estandar)."

SELECT nombre_producto, precio_listado - precio_estandar AS desviacion
FROM productos
WHERE precio_listado > precio_estandar + 1000;

==============================================================================================================================
EJERCICIO 109

"Muestre el apellido y la fecha de contratación de todos los empleados contratados en febrero de 2016 (utilizar LIKE)."

SELECT apellido, fecha_contrato
FROM empleados
WHERE fecha_contrato LIKE '%02/16';

==============================================================================================================================
EJERCICIO 110

"Muestre el apellido y el cargo de todos los empleados que no tienen jefe."

SELECT apellido, puesto_trabajo
FROM empleados
WHERE jefe_id IS NULL;

==============================================================================================================================
EJERCICIO 111

"Muestre el identificador del pedido, el estado y el identificador del vendedor para todos los 
pedidos que tengan vendedor. Ordene los datos en orden descendente de estado y fecha_pedido."

SELECT pedido_id, estado, vendedor_id
FROM pedidos
WHERE vendedor_id IS NOT NULL
ORDER BY estado, fecha_pedido DESC;

==============================================================================================================================
EJERCICIO 112

"Muestre el apellido de todos los empleados que tengan una a como tercera letra."

SELECT apellido
FROM empleados
WHERE apellido LIKE '__a%'

==============================================================================================================================
EJERCICIO 113

"Muestre el apellido de todos los empleados que tengan una a y una e en el apellido."

SELECT apellido
FROM empleados
WHERE apellido LIKE '%a%' AND apellido LIKE '%e%';

==============================================================================================================================
EJERCICIO 114

"Muestre el apellido, el identificador del jefe y el puesto de trabajo de todos los empleados cuyos 
cargos sean 'Stock Clerk' o 'Sales Manager' y cuyos jefes no tengan los identificadores 21, 22 ni 23.s"

SELECT apellido, jefe_id, puesto_trabajo
FROM empleados
WHERE (puesto_trabajo = 'Stock Clerk' OR puesto_trabajo = 'Sales Manager')
    AND (jefe_id NOT BETWEEN 21 AND 23);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 201 - 307												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 201

"Escriba una consulta para mostrar la fecha actual. Etiquete la columna Date"

SELECT SYSDATE AS "Date" FROM dual;

==============================================================================================================================
EJERCICIO 202

"Para cada empleado, muestre el número de empleado, el apellido, el salario y el sueldo con un aumento del 15% y expresado 
como número entero redondeado, etiquétela como "Nuevo sueldo"."

SELECT empleado_id, apellido, sueldo, ROUND(sueldo + sueldo * 0.15) AS "Nuevo Sueldo"
FROM empleados;

==============================================================================================================================
EJERCICIO 203

"Modifique la consulta anterior para agregar una columna que reste el salario nuevo al antiguo . 
Etiquete la columna como "Incremento". "

SELECT empleado_id, apellido, sueldo, 
	ROUND(sueldo + sueldo * 0.15) AS "Nuevo Sueldo", 
	ROUND(sueldo + sueldo * 0.15) - sueldo AS "Incremento"
FROM empleados;

==============================================================================================================================
EJERCICIO 204

"Escriba una consulta que muestre el apellido del empleado con la primera letra en mayúsculas y todas las 
demás en minúsculas así como la longitud del apellido de todos los empleados cuyos apellidos comiencen por J, A o M. 
Ordene los resultados por apellidos de empleado. Etiquete la columna como "Apellido" y "Longitud". "

SELECT INITCAP(apellido) AS "Apellido", LENGTH(apellido) AS "Longitud"
FROM empleados
WHERE SUBSTR(UPPER(apellido),1,1) IN ('J', 'A', 'M')
ORDER BY apellido;

==============================================================================================================================
EJERCICIO 205

"Para cada empleado, muestre su apellido y calcule el número de meses entre el dia de hoy y la fecha de contratación. 
Etiquete la columna como "Meses trabajados", ordene los resultados según el número de meses trabajados (de menos a más). 
Redondee el número de meses al número entero más próximo."

SELECT apellido, ROUND(MONTHS_BETWEEN(SYSDATE, fecha_contrato)) AS "Meses trabajados" 
FROM empleados
ORDER BY "Meses trabajados";

==============================================================================================================================
EJERCICIO 206

"Cree una consulta para mostrar el apellido y el sueldo de todos los empleados. 
Formatee el sueldo para que tenga 15 caracteres de longitud, rellenado a la izquierda con €. 
Etiquete la columna como "Sueldo"."

SELECT apellido, LPAD(sueldo, 15, '€') AS "Sueldo"
FROM empleados;

==============================================================================================================================
EJERCICIO 207

"Escriba una consulta que produzca lo siguiente para cada empleado: 
<Apellido> gana <salario>€ pero le gustaría ganar <salario*3>€. Llame a la columna Salario soñado. 
(Ej: "Foster gana 3300€ pero le gustaría ganar 9900€.")"

SELECT apellido || ' gana ' || sueldo || '€ pero le gustaría ganar ' || sueldo * 3 || '€.' AS "Salario soñado"
FROM empleados;

==============================================================================================================================
EJERCICIO 208

"Muestre el apellido, la fecha de contratación y el día de la semana en el que comenzó el empleado a trabajar 
(LUNES, MARTES,...)(Mayúsculas). Etiquete la columna como "Día". 
Ordene los resultados por dia de la semana, comenzando por el lunes"

SELECT apellido, fecha_contrato, TO_CHAR(fecha_contrato, 'DAY') AS "Día"
FROM empleados
ORDER BY TO_CHAR(fecha_contrato, 'fmD');

==============================================================================================================================
EJERCICIO 209

"Muestre el apellido de cada empleado, así como la primera fecha de revisión de salario,
que es el primer lunes después de cada seis meses empezando a contar desde la fecha de contratación. 
Etiquete la columna "Revisión". Formatea las fecha para que aparezca en un formato similar a 
“Lunes 10 de Octubre de 2016”."

SELECT apellido, TO_CHAR(NEXT_DAY(ADD_MONTHS(fecha_contrato, 6), 1), 'fmDay DD "de" Month "de" YYYY') AS "Revisión"
FROM empleados;

==============================================================================================================================
EJERCICIO 210

"Cree una consulta que muestre el identificador del pedido, el estado y identificador del vendedor. 
Si un pedido no tiene vendedor, ponga "No vendedor". Etiquete la columna como "Vendedor"."

SELECT pedido_id, estado, NVL(TO_CHAR(vendedor_id), 'No vendedor') AS "Vendedor"
FROM pedidos;

==============================================================================================================================
EJERCICIO 211

"Cree una consulta que muestre el apellido de los empleados y que indique las cantidades de sus salarios 
anuales con asteriscos en una sola columna. Cada asterisco significa mil dólares. Ordenado por el sueldo de mayor a menor. 
Etiqueta la columna como "sueldos". Es decir, Si Simmons cobra 2100, se pondrán 2 **. Ejemplo:
Mills ****
Alexander **
Simmons **"

SELECT apellido || ' ' || RPAD('*', TRUNC(sueldo / 1000), '*') AS "sueldos"
FROM empleados
ORDER BY sueldo DESC;

==============================================================================================================================
EJERCICIO 212

"Utilizando la función CASE, escriba una consulta que muestre el apellido, puesto de trabajo y el grado de 
todos los empleados basándose en el valor del puesto de trabajo, según los siguientes datos (etiqueta la columna como "Grado"):
Grados
President A
Administration Vice President B
Stock Manager C
Sales Representative D
Shipping Clerk E
Otros 0"

SELECT apellido, puesto_trabajo, 
    CASE puesto_trabajo
        WHEN 'President' THEN 'A'
        WHEN 'Administration Vice President' THEN 'B'
        WHEN 'Stock Manager' THEN 'C'
        WHEN 'Sales Representative' THEN 'D'
        WHEN 'Shipping Clerk' THEN 'E'
        ELSE '0'
    END
    AS "Grado"
FROM empleados;

==============================================================================================================================
EJERCICIO 213

"Vuelva a escribir la sentencia de la pregunta anterior utilizando el DECODE."

SELECT apellido, puesto_trabajo,
	DECODE(
		puesto_trabajo, 
        'President', 'A',
		'Administration Vice President', 'B',
        'Stock Manager', 'C',
		'Sales Representative', 'D',
		'Shipping Clerk', 'E',
		puesto_trabajo, '0')
        AS "Grado"
FROM empleados;

==============================================================================================================================
EJERCICIO 214

"Cree una consulta que muestre el contacto_id, apellido y teléfono de aquellos contactos los cuales
el segundo conjunto de números del teléfono sea 49 o bien estar entre el 70 y 90. 
Ordenar el resultado en orden ascendente por el identificador del contacto (Dedicado a Alejandro y Nacho)."

SELECT contacto_id, apellido, telefono
FROM contactos
WHERE LENGTH(RTRIM(SUBSTR(telefono, 5, 3))) = 2 AND 
    SUBSTR(telefono, 5, 2) BETWEEN 70 AND 90 OR 
    SUBSTR(telefono, 5, 2) = 49
ORDER BY contacto_id;

==============================================================================================================================
EJERCICIO 301

"Enumere los apellidos de los empleados para aquellos empleados que no tienen el puesto de trabajo 
'Sales Representative', utilizando operadores de conjuntos."

==============================================================================================================================
EJERCICIO 302

"Muestre el identificador de país donde no haya almacenes UBICADOS en ellos, 
utilizando operadores de conjuntos. Se da por hecho que todas las ubicaciones tienen un almacén, 
aunque no exista en tu tabla ALMACEN."

==============================================================================================================================
EJERCICIO 303

"Cree una lista de cargos para los puestos de trabajo 'Programmer', 'Accountant', 'Stock Manager', en ese orden. 
Muestre el apellido y el puesto de trabajo, operadores de conjuntos. Además, crea una tercera columna 
con los valores 'x' para 'Programmer','y' para los 'Accountant' y 'z' para los 'Stock Manager' y 
ordena el resultado por esta última columna."

==============================================================================================================================
EJERCICIO 304

"Enumere los identificadores de empleado y el puesto de trabajo de los empleados que 
trabajan como 'Sales Representative' y su apellido empiece por 'B', operadores de conjuntos."

==============================================================================================================================
EJERCICIO 305

"Escriba una consulta compuesta que enumere lo siguiente:
- Nombre y pagina web de los clientes cuyo nombre empiece por 'B'.
- El nombre y el teléfono de los contactos donde el teléfono acabe en 0.
El resultado contendrá las siguientes tres columnas; nombre, web y teléfono, en el caso de no tener datos poner NULL."

==============================================================================================================================
EJERCICIO 306

"Encuentre los puestos de trabajo que se han contratado durante el período '01-01-2016'-'29-02-2016' y 
también se hayan contratado durante el período '01-03-2016'-'25-08-2016', operadores de conjuntos."

==============================================================================================================================
EJERCICIO 307

"Escriba una consulta compuesta para producir una lista de empleados que muestre 
los porcentajes de aumento, los identificadores de empleado y el salario antiguo y el nuevo aumento.

A los empleados de los departamentos 'Sales Representative', 'Shipping Clerk' y 'Stock Clerk' se les concede un aumento del 5%.
A los empleados del departamento 'Programmer' un aumento del 10%.
A los empleados de los departamentos 'Administration Vice President' y 'Sales Manager' se les concede un aumento del 15%.
Al resto no se les concede ningún aumento (0%).

Ejemplos de salida:
0%  1   24000   0
5%  26  3200    160
10% 8   4200    420
15% 2   17000   2550"