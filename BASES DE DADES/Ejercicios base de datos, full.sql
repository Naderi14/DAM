SET SERVEROUTPUT ON
SELECT * FROM DB.EJERCICIOS;

CALL DB.SOL(NUMERO EJERCICIO,'');

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/												Ejercicios 901 - 912													  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 901
	"Cree una tabla DEPARTAMENTOS basándose en la siguiente tabla de instancias de tabla, utiliza una única instrucción.

	Nombre columna  			DEPARTAMENTO_ID 		NOMBRE
	Tipo de clave       		-                       -    
	Nulos/Únicos        		AUTOINCREMENT       	NOT NULL
	Tabla de claves ajenas 		-                       - 
	Columna de claves ajenas   	-                       -        
	Tipo de dato        		NUMBER              	VARCHAR2
	Longitud        			7                    	50"

	CREATE TABLE departamentos(
    	departamento_id NUMBER(7) GENERATED BY DEFAULT AS IDENTITY,
    	nombre VARCHAR(50) NOT NULL
	);

==============================================================================================================================
EJERCICIO 902
	"Agregue un comentario a la definición de la tabla DEPARTAMENTOS que describa la tabla."

	COMMENT ON TABLE departamentos IS 'Esta tabla alojará los distintos departamentos';

==============================================================================================================================
EJERCICIO 903
	"Agregue una restricción PRIMARY_KEY de nivel de tabla a la tabla DEPARTAMENTOS en la columna DEPARTAMENTO_ID. 
	Debe asignar el nombre my_dep_id_pk a la restricción en el momento de su creación.
	Indicación: La restricción se activa tan pronto como se ejecuta el comando ALTER TABLE correctamente."

	ALTER TABLE departamentos
	ADD CONSTRAINT my_dep_id_pk
	PRIMARY KEY(departamento_id);

==============================================================================================================================
EJERCICIO 904
	"Cree una tabla EMPLEADOS_DEP basándose en el siguiente gráfico de instancias de tabla.

	Nombre columna              EMPLEADO_ID NOMBRE      APELLIDO    DEPARTAMENTO_ID
	Tipo de clave               PRIMARY_KEY -           -           -         
	Nulos/Únicos                -           -           -           -
	Tabla de claves ajenas      -           -           -           -
	Columna de claves ajenas    -           -           -           FOREIGN KEY
	Tipo de dato                NUMBER      VARCHAR2    VARCHAR2    NUMBER
	Longitud                    7           25          25          7"

	CREATE TABLE empleados_dep(
	    empleado_id NUMBER(7),
	    nombre VARCHAR(25),
	    apellido VARCHAR(25),
	    departamento_id NUMBER(7),
	    PRIMARY KEY (empleado_id),
	    FOREIGN KEY (departamento_id) REFERENCES departamentos(departamento_id)
    );

==============================================================================================================================
EJERCICIO 905
	"Modifique la tabla EMPLEADOS_DEP para permitir un apellido de empleado de 50 caracteres."

	ALTER TABLE empleados_dep
	MODIFY apellido VARCHAR2(50);

==============================================================================================================================
EJERCICIO 906
	"Cree la tabla EMPLEADOS2 basándose en la estructura siguiente:

	Nombre columna              EMPLEADO_ID NOMBRE      APELLIDO    EMAIL         TELEFONO      FECHA_CONTRATO    JEFE_ID    SUELDO
	Tipo de clave               -           -           -           -             -             -                 -          -         
	Nulos/Únicos                NOT NULL    NOT NULL    NOT NULL    NOT NULL      NOT NULL      NOT NULL          -          -         
	Tabla de claves ajenas      -           -           -           -             -             -                 -          -         
	Columna de claves ajenas    -           -           -           -             -             -                 -          -         
	Tipo de dato                NUMBER      VARCHAR2    VARCHAR2    VARCHAR2      VARCHAR2      DATE              NUMBER     NUMBER  
	Longitud                    -           255         255         255           50            -                 12         8,2    "

	CREATE TABLE empleados2 (
	    empleado_id NUMBER NOT NULL,
	    nombre VARCHAR2(255) NOT NULL,
	    apellido VARCHAR2(255) NOT NULL,
	    email VARCHAR2(255) NOT NULL,
	    telefono VARCHAR2(50) NOT NULL,
	    fecha_contrato DATE NOT NULL,
	    jefe_id NUMBER(12),
	    sueldo NUMBER(8,2)
	);

==============================================================================================================================
EJERCICIO 907
	"Agregue una columna DEPARTAMENTO_ID a la tabla EMPLEADOS2 (será clave ajena a la tabla DEPARTAMENTOS en la siguiente pregunta). 
	El tipo de datos es number(7)."

	ALTER TABLE empleados2 ADD (departamento_id NUMBER(7));

==============================================================================================================================
EJERCICIO 908
	"Agregue una referencia de clave ajena en la tabla EMPLEADOS2 que asegure que no se asigna 
	el empleado a un departamento no existente. Llame a la restricción my_emp_dept_id_fk"

	ALTER TABLE empleados2 MODIFY (departamento_id NOT NULL)
	ADD CONSTRAINT my_emp_dept_id_fk FOREIGN KEY (departamento_id) REFERENCES departamentos(departamento_id);

==============================================================================================================================
EJERCICIO 909
	"Agregue una columna COMISION del tipo de datos NUMBER, precisión 2, escala 2 en la taba EMPLEADOS2 con una restricción
	a la columna COMISION que asegure que el valor de la comisión sea mayor o igual que cero."

	ALTER TABLE empleados2
	ADD (comision NUMBER(2,2) CHECK (comision >= 0));

==============================================================================================================================
EJERCICIO 910
	"Borre la columna SUELDO de la tabla EMPLEADOS2"

	ALTER TABLE empleados2
	DROP COLUMN sueldo;
	
==============================================================================================================================
EJERCICIO 911
	"Cambie el nombre de la tabla EMPLEADOS2 a EMPLEADOS_EMP"

	ALTER TABLE empleados2 RENAME TO empleados_emp;

==============================================================================================================================
EJERCICIO 912
	"Borre la tabla EMPLEADOS_EMP."

	DROP TABLE empleados_emp;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/									Ejercicios 701 - 704 | 720 - 721 | 740 - 743										  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 701

"Dar de alta a un empleado con los siguientes datos:
EMPLEADO_ID:    108
NOMBRE:     	Daenerys
APELLIDO:       Targaryen
EMAIL:      	daenerys.targaryen@example.com
TELEFONO:       5.171.278.181
FECHA_CONTRATO: 10/12/2021
JEFE_ID:        1
PUESTO_TRABAJO: Princess
SUELDO:     	23900"

INSERT INTO empleados
VALUES (108, 'Daenerys', 'Targaryen', 'daenerys.targaryen@example.com', '5.171.278.181', '10/12/2021', 1, 'Princess', 23900);

==============================================================================================================================
EJERCICIO 702

"Dar de alta a un producto con los siguientes datos:
PRODUCTO_ID:    	289
NOMBRE_PRODUCTO:    Asus
DESCRIPCION:    	ASUS Laptop
PRECIO_ESTANDAR:    899
PRECIO_LISTADO: 	799
CATEGORIA_ID:   	5"

INSERT INTO productos
VALUES (289, 'Asus', 'ASUS Laptop', 899, 799, 5);

==============================================================================================================================
EJERCICIO 703
"Crear un pedido con datos al empleado (VENDEDOR_ID) Daenerys"

INSERT INTO pedidos
VALUES (106, 47, 'Pending', 108, '18/11/24');

==============================================================================================================================
EJERCICIO 704
"Crea una línea de pedido con el pedido y el producto creado anteriormente, la única condición es que el total del pedido sean 150 euros."

INSERT INTO pedido_articulos
VALUES (106, 14, 289, 1, 150);

==============================================================================================================================
EJERCICIO 720

'A los empleados que ganan menos de 3000 euros, aumentarles el sueldo en un 10%.'

UPDATE empleados SET sueldo = sueldo + (sueldo * 0.10)
WHERE sueldo < 3000;

==============================================================================================================================
EJERCICIO 721

"A la empleada Daenerys aumentarle el sueldo en 50 euros."

UPDATE empleados
SET sueldo = 23950
WHERE nombre = 'Daenerys';

"A mi me gusta mas este"
UPDATE empleados
SET sueldo = sueldo + 50
WHERE nombre = 'Daenerys';

==============================================================================================================================
EJERCICIO 740

"Elimina a todos los empleados con identificadores mayores a 107, revisa los datos del pedido antes 
y después de realizar el ejercicio, que pasa con el campo VENDEDOR_ID."

DELETE empleados
WHERE empleado_id > 107;

==============================================================================================================================
EJERCICIO 741

"Elimina la línea del pedido creado en el ejercicio 704  utilizando únicamente los campos CANTIDAD y PRECIO_UNIDAD."

DELETE pedido_articulos
WHERE cantidad = 1 AND precio_unidad = 150;

==============================================================================================================================
EJERCICIO 742

"Elimina el pedido creado en el ejercicio 703."

DELETE pedidos
WHERE pedido_id = 106;

==============================================================================================================================
EJERCICIO 743

"Elimina el producto creado en el ejercicio 702."

DELETE productos
WHERE producto_id = 289;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 101 - 114												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 101

"Cree una consulta para mostrar los nombres de los productos y el precio estándar de los productos que cuestan más de 2500€."

SELECT nombre_producto, precio_estandar
FROM productos
WHERE precio_estandar > 2500;

==============================================================================================================================
EJERCICIO 102

"Cree una consulta para mostrar los nombres de los productos, el precio estándar y el identificador de la categoría 
para el número de producto 200."

SELECT nombre_producto, precio_estandar, categoria_id
FROM productos
WHERE producto_id = 200;

==============================================================================================================================
EJERCICIO 103

"Modifique la consulta anterior para mostrar los nombres de los productos y el precio estándar para todos 
los productos cuyos precios están comprendidos entre 50€ y 3000€."

SELECT nombre_producto, precio_estandar
FROM productos
WHERE precio_estandar BETWEEN 50 AND 3000;

==============================================================================================================================
EJERCICIO 104

"Modifique la consulta anterior para mostrar los nombres de los productos y el precio estándar para todos 
los productos cuyos precios no están comprendidos entre 50€ y $3000€"

SELECT nombre_producto, precio_estandar
FROM productos
WHERE precio_estandar < 50 OR precio_estandar > 3000;

==============================================================================================================================
EJERCICIO 105

"Muestre el apellido del empleado, el puesto de trabajo y la fecha de contrato de los empleados contratados 
entre el 27 de marzo de 2016 y el 1 de mayo de 2016. Ordene la consulta en orden ascendente por fecha de inicio"

SELECT apellido, puesto_trabajo, fecha_contrato
FROM empleados
WHERE fecha_contrato BETWEEN '27/03/2016' AND '01/05/2016'
ORDER BY fecha_contrato;

==============================================================================================================================
EJERCICIO 106

"Muestre el apellido y el puesto de trabajo de todos los empleados de los puestos de trabajo 
'Stock Clerk' y 'Stock Manager' en orden alfabético por apellido."

SELECT apellido, puesto_trabajo
FROM empleados
WHERE puesto_trabajo = 'Stock Clerk' OR puesto_trabajo = 'Stock Manager'
ORDER BY apellido;

==============================================================================================================================
EJERCICIO 107

"Modifique la consulta anterior para enumerar el apellido y el puesto de trabajo de los empleados que fueron 
contratados entre el 20 de febrero de 2016 y el 1 de mayo de 2016, y están en los puestos de trabajo 'Stock Clerk' 
y 'Stock Manager'. Etiquete las columnas Empleado y Contrato respectivamente"

SELECT apellido AS empleado, puesto_trabajo AS contrato
FROM empleados
WHERE (puesto_trabajo = 'Stock Clerk' OR puesto_trabajo = 'Stock Manager')
    AND fecha_contrato BETWEEN '20/02/2016' AND '01/05/2016'
ORDER BY apellido;

==============================================================================================================================
EJERCICIO 108

"Cree una consulta para mostrar los productos donde el precio del listado es más de 1000€ más caro que el 
precio estándar. Muestra el nombre del producto y la desviación (precio_listado–precio_estandar)."

SELECT nombre_producto, precio_listado - precio_estandar AS desviacion
FROM productos
WHERE precio_listado > precio_estandar + 1000;

==============================================================================================================================
EJERCICIO 109

"Muestre el apellido y la fecha de contratación de todos los empleados contratados en febrero de 2016 (utilizar LIKE)."

SELECT apellido, fecha_contrato
FROM empleados
WHERE fecha_contrato LIKE '%02/16';

==============================================================================================================================
EJERCICIO 110

"Muestre el apellido y el cargo de todos los empleados que no tienen jefe."

SELECT apellido, puesto_trabajo
FROM empleados
WHERE jefe_id IS NULL;

==============================================================================================================================
EJERCICIO 111

"Muestre el identificador del pedido, el estado y el identificador del vendedor para todos los 
pedidos que tengan vendedor. Ordene los datos en orden descendente de estado y fecha_pedido."

SELECT pedido_id, estado, vendedor_id
FROM pedidos
WHERE vendedor_id IS NOT NULL
ORDER BY estado, fecha_pedido DESC;

==============================================================================================================================
EJERCICIO 112

"Muestre el apellido de todos los empleados que tengan una a como tercera letra."

SELECT apellido
FROM empleados
WHERE apellido LIKE '__a%'

==============================================================================================================================
EJERCICIO 113

"Muestre el apellido de todos los empleados que tengan una a y una e en el apellido."

SELECT apellido
FROM empleados
WHERE apellido LIKE '%a%' AND apellido LIKE '%e%';

==============================================================================================================================
EJERCICIO 114

"Muestre el apellido, el identificador del jefe y el puesto de trabajo de todos los empleados cuyos 
cargos sean 'Stock Clerk' o 'Sales Manager' y cuyos jefes no tengan los identificadores 21, 22 ni 23.s"

SELECT apellido, jefe_id, puesto_trabajo
FROM empleados
WHERE (puesto_trabajo = 'Stock Clerk' OR puesto_trabajo = 'Sales Manager')
    AND (jefe_id NOT BETWEEN 21 AND 23);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 201 - 307												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 201

"Escriba una consulta para mostrar la fecha actual. Etiquete la columna Date"

-- ORACLE
SELECT SYSDATE AS "Date" FROM dual;

-- MYSQL
SELECT NOW() AS "Date";

==============================================================================================================================
EJERCICIO 202

"Para cada empleado, muestre el número de empleado, el apellido, el salario y el sueldo con un aumento del 15% y expresado 
como número entero redondeado, etiquétela como "Nuevo sueldo"."

-- ORACLE
SELECT empleado_id, apellido, sueldo, ROUND(sueldo + sueldo * 0.15) AS "Nuevo Sueldo"
FROM empleados;

-- MYSQL
SELECT empleado_id, apellido, sueldo, ROUND(sueldo + sueldo * 0.15) AS "Nuevo Sueldo"
FROM empleados;

==============================================================================================================================
EJERCICIO 203

"Modifique la consulta anterior para agregar una columna que reste el salario nuevo al antiguo . 
Etiquete la columna como "Incremento". "

-- ORACLE
SELECT empleado_id, apellido, sueldo, 
	ROUND(sueldo + sueldo * 0.15) AS "Nuevo Sueldo", 
	ROUND(sueldo + sueldo * 0.15) - sueldo AS "Incremento"
FROM empleados;

--MYSQL
SELECT empleado_id, apellido, sueldo, 
	ROUND(sueldo + sueldo * 0.15) AS "Nuevo Sueldo", 
	ROUND(sueldo + sueldo * 0.15) - sueldo AS "Incremento"
FROM empleados;

==============================================================================================================================
EJERCICIO 204

"Escriba una consulta que muestre el apellido del empleado con la primera letra en mayúsculas y todas las 
demás en minúsculas así como la longitud del apellido de todos los empleados cuyos apellidos comiencen por J, A o M. 
Ordene los resultados por apellidos de empleado. Etiquete la columna como "Apellido" y "Longitud". "

-- ORACLE
SELECT INITCAP(apellido) AS "Apellido", LENGTH(apellido) AS "Longitud"
FROM empleados
WHERE SUBSTR(UPPER(apellido),1,1) IN ('J', 'A', 'M')
ORDER BY apellido;

-- MYSQL
SELECT apellido AS "Apellido", LENGTH(apellido) AS "Longitud"
FROM empleados
WHERE SUBSTR(UPPER(apellido),1,1) IN ('J', 'A', 'M')
ORDER BY apellido;

==============================================================================================================================
EJERCICIO 205

"Para cada empleado, muestre su apellido y calcule el número de meses entre el dia de hoy y la fecha de contratación. 
Etiquete la columna como "Meses trabajados", ordene los resultados según el número de meses trabajados (de menos a más). 
Redondee el número de meses al número entero más próximo."

-- ORACLE
SELECT apellido, ROUND(MONTHS_BETWEEN(SYSDATE, fecha_contrato)) AS "Meses trabajados" 
FROM empleados
ORDER BY "Meses trabajados";

-- MYSQL
SELECT apellido, ROUND(TIMESTAMPDIFF(MONTH, fecha_contrato, NOW())) AS "Meses trabajados" 
FROM empleados
ORDER BY "Meses trabajados";

==============================================================================================================================
EJERCICIO 206

"Cree una consulta para mostrar el apellido y el sueldo de todos los empleados. 
Formatee el sueldo para que tenga 15 caracteres de longitud, rellenado a la izquierda con €. 
Etiquete la columna como "Sueldo"."

-- ORACLE
SELECT apellido, LPAD(sueldo, 15, '€') AS "Sueldo"
FROM empleados;

-- MYSQL
SELECT apellido, LPAD(sueldo, 15, '€') AS "Sueldo"
FROM empleados;

==============================================================================================================================
EJERCICIO 207

"Escriba una consulta que produzca lo siguiente para cada empleado: 
<Apellido> gana <salario>€ pero le gustaría ganar <salario*3>€. Llame a la columna Salario soñado. 
(Ej: "Foster gana 3300€ pero le gustaría ganar 9900€.")"

-- ORACLE
SELECT apellido || ' gana ' || sueldo || '€ pero le gustaría ganar ' || sueldo * 3 || '€.' AS "Salario soñado"
FROM empleados;

-- MYSQL
SELECT CONCAT(apellido, ' gana ', sueldo, '€ pero le gustaría ganar ', sueldo * 3, '€.') AS `Salario soñado`
FROM empleados;

==============================================================================================================================
EJERCICIO 208

"Muestre el apellido, la fecha de contratación y el día de la semana en el que comenzó el empleado a trabajar 
(LUNES, MARTES,...)(Mayúsculas). Etiquete la columna como "Día". 
Ordene los resultados por dia de la semana, comenzando por el lunes"

-- ORACLE
SELECT apellido, fecha_contrato, TO_CHAR(fecha_contrato, 'DAY') AS "Día"
FROM empleados
ORDER BY TO_CHAR(fecha_contrato, 'fmD');

-- MYSQL
SELECT apellido, fecha_contrato, DAYNAME(fecha_contrato) AS 'Día'
FROM empleados
ORDER BY DAYOFWEEK(fecha_contrato); 

==============================================================================================================================
EJERCICIO 209

"Muestre el apellido de cada empleado, así como la primera fecha de revisión de salario,
que es el primer lunes después de cada seis meses empezando a contar desde la fecha de contratación. 
Etiquete la columna "Revisión". Formatea las fecha para que aparezca en un formato similar a 
“Lunes 10 de Octubre de 2016”."

-- ORACLE
SELECT apellido, TO_CHAR(NEXT_DAY(ADD_MONTHS(fecha_contrato, 6), 1), 'fmDay DD "de" Month "de" YYYY') AS "Revisión"
FROM empleados;

-- MYSQL
SELECT apellido, DATE_FORMAT(DATE_ADD(DATE_ADD(fecha_contrato, INTERVAL 6 MONTH), 
				 INTERVAL (9 - DAYOFWEEK(DATE_ADD(fecha_contrato, INTERVAL 6 MONTH))) % 7 DAY), '%W %d de %M de %Y') AS `Revisión`
FROM empleados;
-- OR
SELECT apellido, DATE_FORMAT(DATE_ADD(fecha_contrato, 
				 INTERVAL ((TIMESTAMPDIFF(MONTH, fecha_contrato, NOW()) DIV 6) + 1) * 6 MONTH), '%W %d de %M de %Y') AS Revisión
FROM empleados;

==============================================================================================================================
EJERCICIO 210

"Cree una consulta que muestre el identificador del pedido, el estado y identificador del vendedor. 
Si un pedido no tiene vendedor, ponga "No vendedor". Etiquete la columna como "Vendedor"."

-- ORACLE
SELECT pedido_id, estado, NVL(TO_CHAR(vendedor_id), 'No vendedor') AS "Vendedor"
FROM pedidos;

-- MYSQL
SELECT pedido_id, estado, IFNULL(CAST(vendedor_id AS CHAR), 'No vendedor') AS "Vendedor"
FROM pedidos;

==============================================================================================================================
EJERCICIO 211

"Cree una consulta que muestre el apellido de los empleados y que indique las cantidades de sus salarios 
anuales con asteriscos en una sola columna. Cada asterisco significa mil dólares. Ordenado por el sueldo de mayor a menor. 
Etiqueta la columna como "sueldos". Es decir, Si Simmons cobra 2100, se pondrán 2 **. Ejemplo:
Mills ****
Alexander **
Simmons **"

-- ORACLE
SELECT apellido || ' ' || RPAD('*', TRUNC(sueldo / 1000), '*') AS "sueldos"
FROM empleados
ORDER BY sueldo DESC;

-- MYSQL
SELECT CONCAT(apellido, ' ', REPEAT('*', FLOOR(sueldo / 1000))) AS `sueldos`
FROM empleados
ORDER BY sueldo DESC;

==============================================================================================================================
EJERCICIO 212

"Utilizando la función CASE, escriba una consulta que muestre el apellido, puesto de trabajo y el grado de 
todos los empleados basándose en el valor del puesto de trabajo, según los siguientes datos (etiqueta la columna como "Grado"):
Grados
President A
Administration Vice President B
Stock Manager C
Sales Representative D
Shipping Clerk E
Otros 0"

-- ORACLE
SELECT apellido, puesto_trabajo, 
    CASE puesto_trabajo
        WHEN 'President' THEN 'A'
        WHEN 'Administration Vice President' THEN 'B'
        WHEN 'Stock Manager' THEN 'C'
        WHEN 'Sales Representative' THEN 'D'
        WHEN 'Shipping Clerk' THEN 'E'
        ELSE '0'
    END
    AS "Grado"
FROM empleados;

-- MYSQL
SELECT apellido, puesto_trabajo, 
    CASE puesto_trabajo
        WHEN 'President' THEN 'A'
        WHEN 'Administration Vice President' THEN 'B'
        WHEN 'Stock Manager' THEN 'C'
        WHEN 'Sales Representative' THEN 'D'
        WHEN 'Shipping Clerk' THEN 'E'
        ELSE '0'
    END
    AS "Grado"
FROM empleados;

==============================================================================================================================
EJERCICIO 213

"Vuelva a escribir la sentencia de la pregunta anterior utilizando el DECODE."

-- ORACLE
SELECT apellido, puesto_trabajo,
	DECODE(
		puesto_trabajo, 
        'President', 'A',
		'Administration Vice President', 'B',
        'Stock Manager', 'C',
		'Sales Representative', 'D',
		'Shipping Clerk', 'E',
		puesto_trabajo, '0')
        AS "Grado"
FROM empleados;

-- MYSQL
SELECT apellido, puesto_trabajo, 
    CASE puesto_trabajo
        WHEN 'President' THEN 'A'
        WHEN 'Administration Vice President' THEN 'B'
        WHEN 'Stock Manager' THEN 'C'
        WHEN 'Sales Representative' THEN 'D'
        WHEN 'Shipping Clerk' THEN 'E'
        ELSE '0'
    END
    AS "Grado"
FROM empleados;

==============================================================================================================================
EJERCICIO 214

"Cree una consulta que muestre el contacto_id, apellido y teléfono de aquellos contactos los cuales
el segundo conjunto de números del teléfono sea 49 o bien estar entre el 70 y 90. 
Ordenar el resultado en orden ascendente por el identificador del contacto (Dedicado a Alejandro y Nacho)."


-- ORACLE
SELECT contacto_id, apellido, telefono
FROM contactos
WHERE LENGTH(RTRIM(SUBSTR(telefono, 5, 3))) = 2 AND 
    SUBSTR(telefono, 5, 2) BETWEEN 70 AND 90 OR 
    SUBSTR(telefono, 5, 2) = 49
ORDER BY contacto_id;

-- MYSQL
SELECT contacto_id, apellido, telefono
FROM contactos
WHERE LENGTH(RTRIM(SUBSTR(telefono, 5, 3))) = 2 AND 
    SUBSTR(telefono, 5, 2) BETWEEN 70 AND 90 OR 
    SUBSTR(telefono, 5, 2) = 49
ORDER BY contacto_id;

==============================================================================================================================
EJERCICIO 301

"Enumere los apellidos de los empleados para aquellos empleados que no tienen el puesto de trabajo 
'Sales Representative', utilizando operadores de conjuntos."

-- MYSQL
SELECT apellido, puesto_trabajo FROM empleados
INTERSECT
SELECT apellido, puesto_trabajo FROM empleados 
WHERE puesto_trabajo != 'Sales Representative';

==============================================================================================================================
EJERCICIO 302

"Muestre el identificador de país donde no haya almacenes UBICADOS en ellos, 
utilizando operadores de conjuntos. Se da por hecho que todas las ubicaciones tienen un almacén, 
aunque no exista en tu tabla ALMACEN."

-- MYSQL
SELECT u.PAIS_ID 
FROM ubicaciones u, almacenes a 
WHERE u.UBICACION_ID = a.UBICACION_ID;

==============================================================================================================================
EJERCICIO 303

"Cree una lista de cargos para los puestos de trabajo 'Programmer', 'Accountant', 'Stock Manager', en ese orden. 
Muestre el apellido y el puesto de trabajo, operadores de conjuntos. Además, crea una tercera columna 
con los valores 'x' para 'Programmer','y' para los 'Accountant' y 'z' para los 'Stock Manager' y 
ordena el resultado por esta última columna."

SELECT apellido, puesto_trabajo, 
	CASE 
		WHEN puesto_trabajo = 'Programmer' THEN 'X'
		WHEN puesto_trabajo = 'Accountant' THEN 'Y'
		WHEN puesto_trabajo = 'Stock Manager' THEN 'Z'
	END AS "Letra"
FROM empleados
UNION
SELECT APELLIDO, PUESTO_TRABAJO, 
	CASE 
		WHEN puesto_trabajo = 'Programmer' THEN 'X'
		WHEN puesto_trabajo = 'Accountant' THEN 'Y'
		WHEN puesto_trabajo = 'Stock Manager' THEN 'Z'
	END AS "Letra"
FROM empleados;


==============================================================================================================================
EJERCICIO 304

"Enumere los identificadores de empleado y el puesto de trabajo de los empleados que 
trabajan como 'Sales Representative' y su apellido empiece por 'B', operadores de conjuntos."

-- MYSQL
SELECT EMPLEADO_ID, PUESTO_TRABAJO 
FROM empleados 
WHERE PUESTO_TRABAJO = 'Sales Representative'
INTERSECT 
SELECT EMPLEADO_ID, PUESTO_TRABAJO
FROM empleados
WHERE APELLIDO LIKE 'B%';

==============================================================================================================================
EJERCICIO 305

"Escriba una consulta compuesta que enumere lo siguiente:
- Nombre y pagina web de los clientes cuyo nombre empiece por 'B'.
- El nombre y el teléfono de los contactos donde el teléfono acabe en 0.
El resultado contendrá las siguientes tres columnas; nombre, web y teléfono, en el caso de no tener datos poner NULL."

SELECT	c.NOMBRE, c.WEB, NULL AS TELEFONO
FROM clientes c
WHERE NOMBRE LIKE 'B%'
UNION
SELECT co.NOMBRE, NULL AS WEB, co.TELEFONO
FROM contactos co
WHERE TELEFONO LIKE '%0';

==============================================================================================================================
EJERCICIO 306

"Encuentre los puestos de trabajo que se han contratado durante el período '01-01-2016'-'29-02-2016' y 
también se hayan contratado durante el período '01-03-2016'-'25-08-2016', operadores de conjuntos."

SELECT puesto_trabajo AS "Puesto", fecha_contrato AS "Fecha Contrato"
FROM empleados
WHERE fecha_contrato BETWEEN '2016-01-01' AND '2016-02-29'
UNION
SELECT puesto_trabajo AS "Puesto", fecha_contrato AS "Fecha Contrato"
FROM empleados
WHERE fecha_contrato BETWEEN '2016-03-01' AND '2016-08-25';

==============================================================================================================================
EJERCICIO 307

"Escriba una consulta compuesta para producir una lista de empleados que muestre 
los porcentajes de aumento, los identificadores de empleado y el salario antiguo y el nuevo aumento.

A los empleados de los departamentos 'Sales Representative', 'Shipping Clerk' y 'Stock Clerk' se les concede un aumento del 5%.
A los empleados del departamento 'Programmer' un aumento del 10%.
A los empleados de los departamentos 'Administration Vice President' y 'Sales Manager' se les concede un aumento del 15%.
Al resto no se les concede ningún aumento (0%).

Ejemplos de salida:
0%  1   24000   0
5%  26  3200    160
10% 8   4200    420
15% 2   17000   2550"

-- OPCION 1
SELECT 
	CASE
		WHEN PUESTO_TRABAJO IN ('Sales Representative', 'Shipping Clerk', 'Stock Clerk') THEN "5%"
		WHEN PUESTO_TRABAJO = 'Programmer' THEN "10%"
		WHEN PUESTO_TRABAJO IN ('Administration Vice President', 'Sales Manager') THEN "15%"
		ELSE "0%"
	END AS "Porcentaje", EMPLEADO_ID, SUELDO, SUELDO *
	CASE
		WHEN PUESTO_TRABAJO IN ('Sales Representative', 'Shipping Clerk', 'Stock Clerk') THEN 0.05
		WHEN PUESTO_TRABAJO = 'Programmer' THEN 0.10
		WHEN PUESTO_TRABAJO IN ('Administration Vice President', 'Sales Manager') THEN 0.15
		ELSE 0
	END AS "Aumento Sueldo"
	FROM empleados
	ORDER BY CAST(REPLACE(Porcentaje, '%', '') AS DECIMAL);

-- OPCION 2
SELECT CONCAT(INCREMENT * 100, '%'), EMPLEADO_ID, SUELDO * INCREMENT
FROM (
    SELECT EMPLEADO_ID, SUELDO,
        CASE
            WHEN PUESTO_TRABAJO IN ('Sales Representative', 'Shipping Clerk', 'Stock Clerk') THEN 0.05
            WHEN PUESTO_TRABAJO = 'Programmer' THEN 0.1
            WHEN PUESTO_TRABAJO IN ('Administration Vice President', 'Sales Manager') THEN 0.15
            ELSE 0
        END INCREMENT
    FROM empleados
) INCREMENTS
ORDER BY increment;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 401 - 411												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 401
"Muestre el sueldo más alto, el más bajo, la suma y la media de todos los
sueldos para todos los empleados. Redondee los resultados hasta el número entero
más cercano."

SELECT max(SUELDO) AS "Sueldo Máximo", min(SUELDO) AS "Sueldo Mínimo", round(avg(SUELDO), 0) AS "Media Sueldos"  
FROM empleados;

==============================================================================================================================
EJERCICIO 402
"Muestra los puestos de trabajo que hay en la empresa (sin que se repitan).
Ordena el resultado por orden alfabético."

SELECT DISTINCT PUESTO_TRABAJO 
FROM empleados
ORDER BY PUESTO_TRABAJO ASC;

==============================================================================================================================
EJERCICIO 403
"Muestra cuantos puestos de trabajo hay con el siguiente formato: "Hay 19
puestos de trabajo.""

SELECT concat('Hay ', count(DISTINCT PUESTO_TRABAJO), ' puestos de trabajo.') AS "Cantidad"
FROM empleados;

==============================================================================================================================
EJERCICIO 404
"Modifique la consulta del ejercicio 401 para mostrar el puesto de trabajo, el
máximo, sueldo mínimo, la suma y el sueldo medio para cada puesto de trabajo,
ordena el resultado por la columna del sueldo máximo descendientemente."

SELECT PUESTO_TRABAJO ,max(SUELDO) AS "Sueldo Máximo", min(SUELDO) AS "Sueldo Mínimo", round(avg(SUELDO), 0) AS "Media Sueldos"  
FROM empleados
GROUP BY PUESTO_TRABAJO;

==============================================================================================================================
EJERCICIO 405
"Escriba una consulta para mostrar el puesto de trabajo y el número de
personas en ese puesto."

SELECT PUESTO_TRABAJO, count(EMPLEADO_ID) AS "Número Empleados"
FROM empleados
GROUP BY PUESTO_TRABAJO;

==============================================================================================================================
EJERCICIO 406
"Modifique la consulta del ejercicio anterior para filtrar los datos y que
aparezcan únicamente los puestos de trabajo que contengan la letra p, tanto
mayúsculas como minúsculas."

SELECT PUESTO_TRABAJO, count(EMPLEADO_ID) AS "Número Empleados"
FROM empleados
GROUP BY PUESTO_TRABAJO
HAVING PUESTO_TRABAJO LIKE '%p%';

==============================================================================================================================
EJERCICIO 407
"Determine el número jefes. Etiquete la columna "Numero de jefes". Utilice la
columna jefe_id para determinar el número de jefes que hay en la empresa."

SELECT count(DISTINCT JEFE_ID) AS "Número de jefes"
FROM empleados;

==============================================================================================================================
EJERCICIO 408
"Escriba una consulta para visualizar la diferencia entre el mayor y menor
sueldo de los los empleados. Etiquete la columna como "Diferencia"."

SELECT max(SUELDO) - min(SUELDO) AS "Diferencia" 
FROM empleados;

==============================================================================================================================
EJERCICIO 409
"Muestre el número de jefe y el sueldo de su empleado peor pagado para ese
jefe. Excluya los empleados de los que no tengan jefe. Excluya los grupos de trabajo
en los que el del empleado peor pagado sea 6000€ o menos. Ordene el resultado por
sueldo en orden descendente."

SELECT JEFE_ID, min(SUELDO) AS "Peor Sueldo"
FROM empleados
WHERE JEFE_ID IS NOT NULL
GROUP BY JEFE_ID 
HAVING min(SUELDO) > 6000
ORDER BY SUELDO;

==============================================================================================================================
EJERCICIO 410
"Escriba una consulta para mostrar identificador del pedido, así como
identificador del producto (sin que se repita), el número de veces que el producto
aparece en el pedido y la cantidad total del producto en el pedido. Selecciona
únicamente los pedidos 13 y 58, ordena el resultado por pedido_id y producto_id."

SELECT PEDIDO_ID, PRODUCTO_ID, count(PRODUCTO_ID) AS "Cantidad Producto", CANTIDAD
FROM pedido_articulos
WHERE PEDIDO_ID = 13 OR PEDIDO_ID = 58
GROUP BY PRODUCTO_ID 
ORDER BY PEDIDO_ID, PRODUCTO_ID;

==============================================================================================================================
EJERCICIO 411
"Cree una consulta que muestre el número total de empleados y, de ese total,
el número de empleados contratados en enero, febrero y marzo (poner alias).
Ejemplo:
	TOTAL 	   Enero 	Febrero 	Marzo
---------- ---------- ---------- ----------
	107 		14 		  13 		17"

SELECT count(*) AS "Número Empleados", 
	(SELECT count(*) FROM empleados WHERE FECHA_CONTRATO LIKE '____-01-%') AS "Enero",
	(SELECT count(*) FROM empleados WHERE FECHA_CONTRATO LIKE '____-02-%') AS "Febrero",
	(SELECT count(*) FROM empleados WHERE FECHA_CONTRATO LIKE '____-03-%') AS "Marzo" 
FROM empleados;

==============================================================================================================================
EJERCICIO 412
"Cree una consulta para visualizar el puesto de trabajo, el total de empleados
de cada puesto, la cantidad de jefes de cada puesto y la cantidad de empleados que
ganan más de 7000€ de cada puesto de trabajo.
Ejemplo:
	PUESTO 					TOTAL 		JEFES 		7000
------------------------ -----------   ------      ------- 
Administration Assistant     1            1           0
Sales Representative        30            5           22
Stock Clerk                 20            5           0
Programmer                  5             2           1"

SELECT PUESTO_TRABAJO, 
	count(*) AS "Cantidad empleados", 
	count(DISTINCT JEFE_ID) AS "Jefes",
	count(CASE WHEN SUELDO > 7000 THEN 1 END) AS "Cantidad empleados mas de 7000€"
FROM empleados
GROUP BY PUESTO_TRABAJO;

SELECT PUESTO_TRABAJO, 
	count(*) AS "Cantidad empleados", 
	count(DISTINCT JEFE_ID) AS "Jefes",
	count(CASE WHEN avg(SUELDO) > 7000 THEN 1 END) AS "Cantidad empleados mas de 7000€"
FROM empleados
GROUP BY PUESTO_TRABAJO;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios de repaso												  /
/														  biblioteca													  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
"Para repasar ejercicios, tenéis la base de datos adjunta sobre los préstamos de una biblioteca. Os propongo:
Escribe dos consultas que muestren datos de una tabla ordenando los datos por una o varias columnas"
==============================================================================================================================

"Escribe dos consultas que filtren los datos por una o más condiciones, combina AND y OR y recuerda usar paréntesis"
==============================================================================================================================

"Escribe dos consultas que tengan funciones de fila"
==============================================================================================================================

"Escribe dos consultas que utilicen operadores de conjuntos"
==============================================================================================================================

"Haz el siguiente listado de ejercicios sencillos. Puedes complicarlos todo cuanto quieras:
Muestra los títulos y autores de los libros ordenados alfabéticamente por título."
==============================================================================================================================

"Muestra los nombres de los usuarios junto con la fecha de registro, ordenados primero por año de registro (descendente) y después por nombre (ascendente)."
==============================================================================================================================

"Muestra los libros que son del género "Novela" y tienen más de 3 ejemplares disponibles, o aquellos con menos de 2 ejemplares sin importar el género."
==============================================================================================================================

"Muestra los nombres y correos electrónicos de los usuarios concatenados en una sola columna, separados por un guion."
==============================================================================================================================

"Muestra una lista combinada de los nombres de los usuarios y los autores de los libros (sin duplicados)."
==============================================================================================================================

"Muestra los títulos de los libros y el número de ejemplares disponibles, ordenados de mayor a menor número de ejemplares."
==============================================================================================================================

"Muestra los nombres y fechas de registro de los usuarios, ordenados primero por la fecha de registro más antigua y luego alfabéticamente por nombre."
==============================================================================================================================

"Muestra los préstamos realizados después del 1 de enero de 2023 y que todavía no se han devuelto."
==============================================================================================================================

"Muestra los libros que sean del género "Historia" y tengan más de 1 ejemplar, o que no tengan género definido."
==============================================================================================================================

"Muestra el nombre de los usuarios junto con la longitud de cada nombre."
==============================================================================================================================

"Muestra una lista combinada de los títulos de los libros y los nombres de los usuarios, sin duplicados."
==============================================================================================================================


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios de repaso												  /
/														   tienda   													  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
"Muestra cuántas compras ha realizado cada cliente."

SELECT cliente, count(*) 
FROM ventas
GROUP BY cliente;

==============================================================================================================================
"Enunciado: Calcula el total gastado (SUM()) por cada cliente y muestra solo aquellos que han gastado más de 5000.Ordenados de manera descendente"

SELECT cliente, sum(monto) AS "suma_total"
FROM ventas
GROUP BY cliente 
HAVING sum(monto) > 5000
ORDER BY sum(monto) DESC;

==============================================================================================================================
"Obtén el precio promedio de los productos en cada categoría y muestra solo categorías con un precio promedio mayor a 100."

SELECT categoria, avg(precio) AS "promedio"
FROM productos
GROUP BY categoria
HAVING avg(precio) > 100;

==============================================================================================================================
"Cuenta cuántos empleados hay en cada departamento y muestra solo aquellos con más de 2 empleados"

SELECT departamento, count(*) AS "numero_empleados" 
FROM empleados
GROUP BY departamento
HAVING count(*) > 2;

==============================================================================================================================
"Encuentra el precio máximo de los productos dentro de cada categoría"

SELECT categoria, max(precio) AS "precio_máximo" 
FROM productos
GROUP BY categoria;

==============================================================================================================================
"Encuentra el precio mínimo (MIN()) de los productos dentro de cada categoría."

SELECT categoria, min(precio) AS "precio_mínimo" 
FROM productos
GROUP BY categoria;

==============================================================================================================================
"Calcula el monto promedio (AVG()) de las compras realizadas por cada cliente."

SELECT cliente, avg(monto) AS "media_compras"
FROM ventas
GROUP BY cliente;

==============================================================================================================================
"Calcula el promedio de empleados por departamento y redondea el resultado."

SELECT round(avg(numero_empleados), 2) AS "promedio_empleados" 
FROM (
	SELECT count(*) AS numero_empleados
	FROM empleados
	GROUP BY departamento
) subconsulta

==============================================================================================================================
"Identifica el departamento con más empleados."

SELECT departamento AS "departamento_con_mas_empleados", count(*) AS "cantidad_empleados"
FROM empleados
GROUP BY departamento
ORDER BY cantidad_empleados DESC
LIMIT 1;

==============================================================================================================================
"Encuentra el cliente que ha realizado la mayor cantidad de compras y muestra su nombre junto con el número de compras realizadas."

SELECT cliente, count(*) AS "compras_realizadas" 
FROM ventas
GROUP BY cliente
ORDER BY compras_realizadas DESC
LIMIT 1;

==============================================================================================================================
"Muestra el producto más caro y el más barato de cada categoría."

SELECT categoria, max(precio) AS "mas_caro", min(precio) AS "mas_barato" 
FROM productos
GROUP BY categoria;

==============================================================================================================================
"Lista los clientes cuyo gasto total es superior al promedio de todas las ventas realizadas"

SELECT cliente, sum(monto) AS "total_monto"
FROM ventas
GROUP BY cliente
HAVING total_monto > (SELECT avg(monto) FROM ventas);

==============================================================================================================================
"Calcula el porcentaje de empleados que tiene cada departamento sobre el total de empleados, y muestra el departamento con mayor porcentaje."

SELECT departamento, concat(round(count(*) * 100 / (SELECT COUNT(*) FROM empleados)), '%') AS "porcentaje"
FROM empleados
GROUP BY departamento
ORDER BY porcentaje DESC
LIMIT 1;

==============================================================================================================================
"Encuentra la categoría con más productos cuyo precio es mayor al precio promedio de todos los productos."

SELECT categoria AS "categoria_mas_productos", count(*) AS "cantidad_productos"
FROM productos
WHERE precio > (SELECT avg(precio) FROM productos)
GROUP BY categoria;

==============================================================================================================================
"Encuentra el cliente que ha realizado la compra individual más alta y muestra su nombre junto con el monto de esa compra."

SELECT cliente, monto
FROM ventas
ORDER BY monto DESC
LIMIT 1;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios de repaso												  /
/														 PRE-Examen   													  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 1
"Escribe una consulta SQL que obtenga el nombre y salario del empleado con el salario más alto.
 Soluciona el ejercicio haciendo uso de subconsultas."

SELECT nombre, salario 
FROM empleados
WHERE salario = (SELECT max(salario) FROM empleados);

==============================================================================================================================
EJERCICIO 2
"Escribe una consulta SQL que devuelva el nombre y el presupuesto de los proyectos cuyo presupuesto sea superior
 al presupuesto medio de todos los proyectos. Soluciona el ejercicio haciendo uso de subconsultas."

SELECT nombre, presupuesto
FROM proyectos
WHERE presupuesto > (SELECT avg(presupuesto) FROM proyectos);

==============================================================================================================================
EJERCICIO 3
"Empleados que no son responsables de ningún proyecto. Soluciona el ejercicio haciendo uso de subconsultas."

SELECT id, nombre
FROM empleados
WHERE id NOT IN (SELECT responsable_id FROM proyectos);

==============================================================================================================================
EJERCICIO 4
"Escribe una consulta SQL que obtenga los proyectos cuyo responsable tenga un salario mayor a 3000€. 
Soluciona el ejercicio haciendo uso de subconsultas."

SELECT nombre
FROM proyectos
WHERE responsable_id IN (SELECT id FROM empleados WHERE salario > 3000);

==============================================================================================================================
EJERCICIO 5
"Escribe una consulta SQL que devuelva los proyectos gestionados por empleados del departamento de IT. 
Soluciona el ejercicio haciendo uso de subconsultas."

SELECT nombre
FROM proyectos
WHERE responsable_id IN (SELECT id FROM empleados WHERE departamento = 'IT');

==============================================================================================================================
EJERCICIO 6
"Escribe una consulta SQL que muestre el nombre de cada empleado, su salario y una
clasificación según su nivel salarial: "Salario Alto" si el salario es mayor o igual a 3000€,
"Salario Medio" si el salario está entre 2500 y 2999€ o "Salario Bajo" si el salario es
menor a 2500€.Soluciona el ejercicio haciendo uso de funciones de fila."

SELECT nombre, salario,
	CASE
		WHEN salario >= 3000 THEN 'Salario alto'
		WHEN salario BETWEEN 2500 AND 2999 THEN 'Salario medio'
		WHEN salario < 2500 THEN 'Salario bajo'
	END AS 'clasificacion'
FROM empleados;

==============================================================================================================================
EJERCICIO 7
"Escribe una consulta SQL que devuelva una lista de:Los nombres de los empleados
del departamento "IT" y los nombres de los proyectos cuyo presupuesto sea superior a
60,000. Utiliza operadores de conjuntos."

SELECT e.nombre
FROM empleados e
WHERE e.departamento = 'IT'
UNION
SELECT p.nombre 
FROM proyectos p
WHERE p.presupuesto > 60000;

==============================================================================================================================
EJERCICIO 8
"Escribe una consulta SQL que calcule el salario medio de los empleados para cada
departamento. La consulta debe devolver el nombre del departamento y el salario medio
ordenados alfabéticamente. Soluciona el ejercicio haciendo uso de funciones de
agregación."

SELECT departamento, avg(salario) AS "Salario medio" 
FROM empleados e 
GROUP BY departamento
ORDER BY departamento;

==============================================================================================================================
EJERCICIO 9
"Contar el número de proyectos con un presupuesto superior a 60,000€. Soluciona el
ejercicio haciendo uso de funciones de agregación."

SELECT count(*) AS "Proyectos con presupuesto mayor de 60,000€" 
FROM proyectos p
WHERE presupuesto > 60000;

==============================================================================================================================
EJERCICIO 10
"Escribe una consulta SQL que devuelva el nombre de los departamentos y el salario
promedio de los empleados de cada departamento.La consulta debe mostrar solo los
departamentos cuyo salario promedio de empleados sea superior al salario promedio de
todos los empleados. Soluciona el ejercicio haciendo uso de funciones de agregación y
subconsultas."

SELECT departamento, avg(salario) AS "Promedio salario"
FROM empleados e
GROUP BY departamento
HAVING avg(salario) > (SELECT avg(e2.salario) FROM empleados e2);



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Examen agregación   												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 1
"Queremos obtener una lista combinada de canciones y artistas. La consulta debe mostrar todos los nombres de 
las canciones y todos los nombres de los artistas en un solo conjunto de resultados.
 Resuelve el ejercicio usando operadores de conjuntos."

SELECT c.nombre_cancion AS "Lista nombres canciones y artistas"
FROM canciones c
UNION
SELECT a.nombre_artista
FROM artistas a;

==============================================================================================================================
EJERCICIO 2
"Queremos obtener una lista combinada de álbumes y canciones. La consulta debe mostrar 
todos los nombres de los álbumes y todas las canciones en un solo conjunto de resultados, 
pero sin eliminar duplicados. Resuelve el ejercicio usando operadores de conjuntos."

SELECT a.nombre_album AS "Lista canciones y albumes"
FROM albumes a
UNION ALL
SELECT c.nombre_cancion 
FROM canciones c;

==============================================================================================================================
EJERCICIO 3
"Queremos saber cuántas canciones tiene cada álbum. Resuelve el ejercicio usando funciones de agregación."

SELECT id_album, count(*) AS "Canciones"
FROM canciones c
GROUP BY id_album;

==============================================================================================================================
EJERCICIO 4
"Muestra las id de los artistas que tienen más de un álbum. Resuelve el ejercicio usando funciones de agregación."

-- LA BUENA
SELECT id_artista
FROM albumes 
GROUP BY id_artista 
HAVING count(id_album) > 1;

-- LA QUE ME SALIO DEL ALMA
SELECT a.id_artista
FROM artistas a, albumes a2
WHERE a.id_artista = a2.id_artista
GROUP BY a.nombre_artista
HAVING count(a2.id_album) > 1;

==============================================================================================================================
EJERCICIO 5
"Queremos clasificar las canciones en "Primer Álbum" o "Otro Álbum", dependiendo del id_album de la canción.
 Si el id_album es 1 es el "Primer Álbum" sino "Otro Álbum". Devuelve el nombre de la canción y su clasificación. 
 Resuelve el ejercicio usando funciones de agregación."

SELECT id_cancion,
	CASE 
		WHEN id_album = 1 THEN "Primer Álbum"
		ELSE "Otro Álbum"
	END AS "Número Álbum"
FROM canciones c;


DE MIRIAM
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 501 - 512												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 501 
"Escriba una consulta para mostrar el apellido y la fecha de contratación de cualquier empleado del mismo puestos 
de trabajo que Wood (apellido). Excluya a Wood."

SELECT APELLIDO, FECHA_CONTRATO
FROM empleados 
WHERE PUESTO_TRABAJO = (SELECT PUESTO_TRABAJO FROM empleados e WHERE APELLIDO LIKE 'Wood') AND APELLIDO NOT LIKE 'Wood';

==============================================================================================================================
EJERCICIO 502 
"Escriba una consulta que muestre el sueldo, el apellidos y el identificador de todos los empleados que 
ganen más del salario medio. Ordene los resultados por salario en orden ascendente."

SELECT SUELDO, APELLIDO, EMPLEADO_ID
FROM empleados
WHERE SUELDO > (SELECT avg(SUELDO) FROM empleados)
ORDER BY SUELDO ASC;

==============================================================================================================================
EJERCICIO 503 
"Escriba una consulta que muestre el identificador y el nombre de todos los empleados que trabajen en un 
puestos de trabajo con cualquier empleado cuyo apellido contenga la letra p."

SELECT EMPLEADO_ID, NOMBRE
FROM empleados
WHERE PUESTO_TRABAJO IN (SELECT PUESTO_TRABAJO FROM empleados WHERE APELLIDO LIKE '%p%');

==============================================================================================================================
EJERCICIO 504 
"Muestre el apellido, el puesto de trabajo y el jefe_id de todos los empleados que hayan 
realizado un pedido después del 01/12/16."

SELECT APELLIDO, PUESTO_TRABAJO, JEFE_ID
FROM empleados
WHERE EMPLEADO_ID IN (SELECT VENDEDOR_ID FROM pedidos WHERE FECHA_PEDIDO > '01/12/16');

==============================================================================================================================
EJERCICIO 505 
"Muestre el apellido y el salario de todos los empleados cuyo jefe se llame 'Jaxon'."

SELECT APELLIDO, SUELDO
FROM empleados
WHERE JEFE_ID = (SELECT EMPLEADO_ID FROM empleados WHERE NOMBRE = 'Jaxon');

==============================================================================================================================
EJERCICIO 506 
"Muestre el número de pedido y el estado de los pedidos cuyo cliente se llame 'Supervalu'."

SELECT PEDIDO_ID, ESTADO
FROM pedidos
WHERE CLIENTE_ID = (SELECT CLIENTE_ID FROM clientes WHERE NOMBRE = 'Supervalu');

==============================================================================================================================
EJERCICIO 507 
"Modifique la consulta anterior para que muestre el número de pedido y el estado de los pedidos 
cuyo cliente se llame 'Supervalu' y además solo aparezcan los pedidos que tengan más de 5 líneas."

-- PARA SABER LOS PEDIDOS Y LA CANTIDAD DE ARTICULOS QUE HIZO LA PERSONA
SELECT count(pe.ARTICULO_ID), (pe.PEDIDO_ID) 
FROM pedido_articulos pe
WHERE pe.PEDIDO_ID IN (
	SELECT p.PEDIDO_ID FROM pedidos p WHERE p.CLIENTE_ID = (
		SELECT c.CLIENTE_ID FROM clientes c WHERE c.NOMBRE = 'Supervalu'))
GROUP BY PEDIDO_ID;

-- SOLUCION DE LA CONSULTA
SELECT PEDIDO_ID, ESTADO
FROM pedidos
WHERE CLIENTE_ID = (SELECT CLIENTE_ID FROM clientes WHERE NOMBRE = 'Supervalu') 
	AND PEDIDO_ID IN (SELECT pa.PEDIDO_ID FROM pedido_articulos pa GROUP BY pa.PEDIDO_ID HAVING count(pa.ARTICULO_ID) > 5);

==============================================================================================================================
EJERCICIO 508 
"Escriba una consulta para encontrar a los empleados que reciben el segundo salario más alto.
Devuelve el identificador, el apellido y el sueldo de esos empleados."

SELECT EMPLEADO_ID, APELLIDO, SUELDO
FROM empleados e
WHERE SUELDO = (
		SELECT DISTINCT SUELDO 
		FROM empleados 
		ORDER BY SUELDO DESC 
		LIMIT 1 OFFSET 1
	);

==============================================================================================================================
EJERCICIO 509 
"Selecciona el identificador, el CP y la ciudad de las ubicaciones cuya región se llame 'Asia'."

SELECT UBICACION_ID , CP , CIUDAD
FROM ubicaciones u
WHERE PAIS_ID IN (
		SELECT PAIS_ID FROM paises p WHERE REGION_ID = (
				SELECT REGION_ID FROM regiones r WHERE NOMBRE_REGION = 'Asia'
			)
	);

==============================================================================================================================
EJERCICIO 510 
"Selecciona el identificador y el nombre de los productos de aquellos productos que están 
ubicados en el almacén que se llama 'Southlake, Texas'."

SELECT PRODUCTO_ID , NOMBRE_PRODUCTO 
FROM productos p 
WHERE p.PRODUCTO_ID IN (
	SELECT i.PRODUCTO_ID FROM inventarios i WHERE i.ALMACEN_ID = (
		SELECT ALMACEN_ID FROM almacenes a WHERE a.ALMACEN_NOMBRE = 'Southlake, Texas'
		)
	);

==============================================================================================================================
EJERCICIO 511 
"Selecciona el identificador y el apellido de los empleados cuyo puesto de trabajo sea el 
mismo que el empleado que haya facturado más en un mismo pedido (la suma del total en euros del pedido)."

SELECT e.EMPLEADO_ID , e.APELLIDO
FROM empleados e 
WHERE PUESTO_TRABAJO IN (
	SELECT e2.PUESTO_TRABAJO FROM empleados e2 WHERE e2.EMPLEADO_ID IN (
		SELECT p.VENDEDOR_ID FROM pedidos p WHERE p.PEDIDO_ID = (
			SELECT pa.PEDIDO_ID 
			FROM pedido_articulos pa 
			GROUP BY pa.PEDIDO_ID
			ORDER BY sum(pa.CANTIDAD * pa.PRECIO_UNIDAD) DESC
			LIMIT 1
			)
		)
	);

==============================================================================================================================
EJERCICIO 512 
"Modifica el ejercicio anterior para que sea el segundo empleado que más ha facturado en un mismo pedido."

SELECT e.EMPLEADO_ID , e.APELLIDO
FROM empleados e 
WHERE PUESTO_TRABAJO IN (
	SELECT e2.PUESTO_TRABAJO FROM empleados e2 WHERE e2.EMPLEADO_ID IN (
		SELECT p.VENDEDOR_ID FROM pedidos p WHERE p.PEDIDO_ID = (
			SELECT pa.PEDIDO_ID 
			FROM pedido_articulos pa 
			GROUP BY pa.PEDIDO_ID
			ORDER BY sum(pa.CANTIDAD * pa.PRECIO_UNIDAD) DESC
			LIMIT 1 OFFSET 1
			)
		)
	);


DE ANA
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 501 - 510												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 501 
"Muestra el id y dirección de todas las propiedades cuyo precio sea superior al precio
medio de todas las propiedades"

SELECT p.id , p.direccion
FROM propiedades p 
WHERE p.precio > (SELECT avg(p2.precio) FROM propiedades p2);

==============================================================================================================================
EJERCICIO 502 
"Muestra el nombre y email de los clientes que han comprado al menos una propiedad"

SELECT DISTINCT c.nombre , c.email
FROM clientes c 
WHERE c.id = (SELECT t.cliente_id FROM transacciones WHERE t.tipo = 'Compra');

==============================================================================================================================
EJERCICIO 503 
"Muestra los nombre y correo electrónicos de los agentes que han gestionado más de
una transacción"

SELECT a.nombre , a.email 
FROM agentes a
WHERE a.id = (SELECT t.agente_id FROM transacciones t GROUP BY t.agente_id HAVING count(t.id) > 1);

==============================================================================================================================
EJERCICIO 504 
"Muestra el id todas las propiedades que aún no han sido vendidas ni alquiladas"

SELECT p.id 
FROM propiedades p
WHERE p.estado != 'Venta' AND p.estado != 'Alquiler';

==============================================================================================================================
EJERCICIO 505 
"Muestra el nombre del cliente que ha realizado más alquileres"

-- SOLUCION 1
SELECT c.nombre 
FROM clientes c , transacciones t
WHERE c.id = t.cliente_id AND t.tipo = 'Alquiler'
GROUP BY c.id
ORDER BY count(t.id) DESC 
LIMIT 1;

-- SOLUCION 2
SELECT c.nombre
FROM clientes c
WHERE c.id = (SELECT t.cliente_id FROM transacciones t WHERE t.tipo = 'Alquiler'
		GROUP BY t.cliente_id ORDER BY count(t.id) DESC LIMIT 1
	);

==============================================================================================================================
EJERCICIO 506 
"Muestra las direcciones de las propiedades de tipo "Casa" cuyo precio es mayor que
la propiedad más cara del tipo "Piso""

SELECT p.direccion 
FROM propiedades p 
WHERE p.tipo = 'Casa' AND p.precio > (SELECT max(p2.precio) FROM propiedades p2 WHERE p2.tipo = 'Piso');

==============================================================================================================================
EJERCICIO 507 
"Muestra los nombres de los clientes que han realizado transacciones después del 1
de enero de 2023"

SELECT c.nombre 
FROM clientes c, transacciones t
WHERE c.id = t.cliente_id AND t.fecha > '2023-01-01';

==============================================================================================================================
EJERCICIO 508 
"Encuentra la dirección de la propiedad más cara comprada por el cliente que ha
gastado más dinero en total en compras"

SELECT p.direccion 
FROM propiedades p, transacciones t
WHERE p.id = t.propiedad_id AND t.cliente_id = (
			SELECT t.cliente_id
			FROM transacciones t, propiedades p 
			WHERE t.propiedad_id = p.id
			GROUP BY t.cliente_id
			ORDER BY sum(p.precio) DESC
			LIMIT 1
		)
ORDER BY p.precio DESC
LIMIT 1;

==============================================================================================================================
EJERCICIO 509 
"Encuentra las direcciones de las propiedades cuyo precio es mayor que el promedio
de compras del cliente que ha gastado menos dinero en total."

SELECT p2.direccion 
FROM (SELECT t2.cliente_id
			FROM transacciones t2, propiedades p2 
			WHERE t2.propiedad_id = p2.id
			GROUP BY t2.cliente_id
			ORDER BY sum(p2.precio) ASC
			LIMIT 1) clmin, propiedades p, propiedades p2, transacciones t
WHERE t.cliente_id = clmin.cliente_id AND p.id = t.propiedad_id AND p2.id = t.propiedad_id
GROUP BY p2.direccion, p2.precio
HAVING p2.precio >= avg(p.precio);

==============================================================================================================================
EJERCICIO 510 
"Encuentra la dirección de la propiedad más cara alquilada por el cliente que ha
realizado la mayor cantidad de alquileres"

SELECT p2.direccion 
FROM (SELECT t2.cliente_id
			FROM transacciones t2, propiedades p2 
			WHERE t2.propiedad_id = p2.id AND p2.estado = 'Alquiler'
			GROUP BY t2.cliente_id
			ORDER BY count(p2.precio) DESC
			LIMIT 1) clmax, propiedades p, propiedades p2, transacciones t
WHERE t.cliente_id = clmax.cliente_id AND t.tipo = 'Alquiler' AND p.id = t.propiedad_id AND p2.id = t.propiedad_id
GROUP BY p2.direccion, p2.precio
HAVING p2.precio = max(p.precio);



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/																														  /
/													Ejercicios 601 - 614												  /
/																														  /
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
==============================================================================================================================
EJERCICIO 601 
"Escriba una consulta para mostrar el identificador de las ubicaciones, el CP, el estado y 
el nombre del país (utilizar join)."

==============================================================================================================================
EJERCICIO 602 
"Escriba una consulta para mostrar el identificador de las ubicaciones, el CP, 
el estado y el nombre del país (sin utilizar join)."

==============================================================================================================================
EJERCICIO 603 
"Cree un listado que muestre el nombre del producto, la descripción y 
el nombre de la categoría de todos los productos (utilizar join). "

==============================================================================================================================
EJERCICIO 604 
"Cree un listado que muestre el nombre del producto, la descripción y 
el nombre de la categoría de todos los productos (sin utilizar join). "

==============================================================================================================================
EJERCICIO 605 
"Lista el identificador del pedido, el estado y el nombre del cliente (utilizar join). "

==============================================================================================================================
EJERCICIO 606 
"Lista el identificador del pedido, el estado y el nombre del cliente (sin utilizar join)."

==============================================================================================================================
EJERCICIO 607 
"Muestra el nombre del producto, la cantidad de productos y el nombre del almacén del almacen cuyo 
identificador es el 9, ordena el resultado por el nombre del producto (utilizar join). "

==============================================================================================================================
EJERCICIO 608 
"Muestra el nombre del producto, la cantidad de productos y el nombre del almacén del almacen cuyo identificador es el 9, 
ordena el resultado por el nombre del producto (sin utilizar join)."

==============================================================================================================================
EJERCICIO 609 
"Muestra el nombre del cliente y el nombre de su contacto de aquellos clientes que empiezan por la letra 'a', 
Etiquete las columnas como 'nombre_cliente y nombre_contacto' (utilizar join). "

==============================================================================================================================
EJERCICIO 610 
"Muestra el nombre del cliente y el nombre de su contacto de aquellos clientes que empiezan por la letra 'a', 
Etiquete las columnas como 'nombre_cliente y nombre_contacto' (sin utilizar join)."

==============================================================================================================================
EJERCICIO 611 
"Muestra el identificador del pedido y el nombre del empleado que lo ha realizado, 
en el caso de que el pedido no tenga empleado aparecerá null en el campo nombre. "

==============================================================================================================================
EJERCICIO 612 
"Crea una lista con los diferentes nombres de los productos ordenados alfabéticamente (sin duplicar) 
que ha comprado el cliente con nombre 'AbbVie' (vigilar con los pedidos cancelados)."

==============================================================================================================================
EJERCICIO 613 
"Lista el nombre de los almacenes cuya región es 'Asia'."

==============================================================================================================================
EJERCICIO 614
"Muestra el nombre y apellido del empleado junto al nombre y apellido de su jefe, 
etiquete las columnas como nombre_empleado, apellido_empleado, nombre_jefe y apellido_jefe respectivamente. 
(Si no tiene jefe no ha de aparecer en el resultado) "

==============================================================================================================================
EJERCICIO 615
"Muestra el nombre del empleado que vende el pedido y el identificador del pedido de todos los empleados. 
Si el empleado no tiene ningún pedido, deberá mostrar el texto 'No dispone de pedidos'."